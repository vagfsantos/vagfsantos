/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$github-name: 'github';
$github-x: 119px;
$github-y: 67px;
$github-offset-x: -119px;
$github-offset-y: -67px;
$github-width: 35px;
$github-height: 35px;
$github-total-width: 186px;
$github-total-height: 153px;
$github-image: '../../build/images/sprite.png';
$github: (119px, 67px, -119px, -67px, 35px, 35px, 186px, 153px, '../../build/images/sprite.png', 'github', );
$linkedin-name: 'linkedin';
$linkedin-x: 0px;
$linkedin-y: 119px;
$linkedin-offset-x: 0px;
$linkedin-offset-y: -119px;
$linkedin-width: 34px;
$linkedin-height: 34px;
$linkedin-total-width: 186px;
$linkedin-total-height: 153px;
$linkedin-image: '../../build/images/sprite.png';
$linkedin: (0px, 119px, 0px, -119px, 34px, 34px, 186px, 153px, '../../build/images/sprite.png', 'linkedin', );
$logo-name: 'logo';
$logo-x: 119px;
$logo-y: 0px;
$logo-offset-x: -119px;
$logo-offset-y: 0px;
$logo-width: 67px;
$logo-height: 67px;
$logo-total-width: 186px;
$logo-total-height: 153px;
$logo-image: '../../build/images/sprite.png';
$logo: (119px, 0px, -119px, 0px, 67px, 67px, 186px, 153px, '../../build/images/sprite.png', 'logo', );
$qrcode-name: 'qrcode';
$qrcode-x: 0px;
$qrcode-y: 0px;
$qrcode-offset-x: 0px;
$qrcode-offset-y: 0px;
$qrcode-width: 119px;
$qrcode-height: 119px;
$qrcode-total-width: 186px;
$qrcode-total-height: 153px;
$qrcode-image: '../../build/images/sprite.png';
$qrcode: (0px, 0px, 0px, 0px, 119px, 119px, 186px, 153px, '../../build/images/sprite.png', 'qrcode', );
$spritesheet-width: 186px;
$spritesheet-height: 153px;
$spritesheet-image: '../../build/images/sprite.png';
$spritesheet-sprites: ($github, $linkedin, $logo, $qrcode, );
$spritesheet: (186px, 153px, '../../build/images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
